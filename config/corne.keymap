/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
// #include <behaviors/num_word.dtsi>

&mt {
    flavor = "balanced";
    tapping-term-ms = <180>;
    quick-tap-ms = <0>;
};

&lt { tapping-term-ms = <150>; };

/ {
    behaviors {
        bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            label = "Backspace and Delete";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt_clear_2: bt_clear_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "Double Tap: BT Clear";
            #binding-cells = <0>;
            bindings = <&none>, <&bt BT_CLR>;

            tapping-term-ms = <200>;
        };

        shift_util_layer: shift_util_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "RSHIFT util_layer";
            #binding-cells = <0>;
            bindings = <&kp RSHIFT>, <&to 4>;
        };

        right_hrm: right_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <36 37 38 39 40 41 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
            hold-trigger-on-release;
        };

        left_hrm: left_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
        };

        // nav_word: nav_word {
        //     compatible = "zmk,behavior-auto-layer";
        //     #binding-cells = <1>;
        //     continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP>;
        //     ignore-modifiers;
        // };
    };

    macros {
        mac_caps: mac_caps {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap_time 100>, <&kp CAPSLOCK>;

            label = "Caps";
        };
        mac_ss: mac_ss {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(A))>;

            label = "ScreenShot";
        };
        mac_lang: mac_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F13>;

            label = "Language";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer { // 0
            bindings = <
&lt TAB 1          &kp Q  &kp W  &kp E          &kp R             &kp T          &kp Y        &kp U        &kp I           &kp O    &kp P          &bs_del
&caps_word  &left_hrm LCTRL A  &left_hrm LSHIFT S  &left_hrm LALT D  &left_hrm LGUI F  &trans         &trans  &right_hrm RGUI J  &right_hrm RALT K  &right_hrm RSHIFT L  &right_hrm RCTRL SEMI  &kp SINGLE_QUOTE
&lt ESC 2            &kp Z  &kp X  &kp C          &kp V             &kp B          &kp N        &kp M        &kp COMMA       &kp DOT  &kp FSLH       &kp ESCAPE
                                &kp LSHIFT             &kp TAB           &lt 3 ENTER    &lt 4 SPACE  &bs_del            &shift_util_layer RSHIFT
            >;
        };


        num_layer {
            bindings = <
&kp ESC  &kp N1        &kp N2        &kp N3         &kp N4         &kp N5         &kp N6      &kp N7             &kp N8        &kp N9        &kp N0       &trans
&trans  &kp LCTRL     &kp LSHIFT    &kp LALT       &kp LGUI       &trans         &kp PLUS    &kp MINUS          &kp UNDER     &kp EQUAL     &kp ASTERISK &trans
&trans  &trans        &trans        &trans         &trans         &trans         &trans      &trans             &trans        &trans        &trans       &trans
                                    &trans         &trans         &trans         &trans      &trans             &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans        &trans        &trans         &trans         &trans         &trans      &trans             &trans        &trans        &trans  &trans
&trans  &kp LCTRL     &kp LSHIFT    &kp LALT       &kp LGUI       &trans         &kp LEFT    &kp DOWN           &kp UP        &kp RIGHT     &trans  &trans
&kp ESC &trans        &trans        &trans         &trans         &trans         &kp HOME    &kp PG_DN        &kp PG_UP        &kp END       &trans  &trans
                                    &trans         &trans         &trans         &trans      &trans             &trans
            >;
        };

        sym_layer {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND  &kp DOLLAR  &kp PERCENT      &kp CARET  &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp LCTRL        &kp LSHIFT   &kp LALT   &kp LGUI    &trans           &kp PLUS   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans
&trans  &trans           &trans       &trans     &trans      &trans           &kp EQUAL  &kp MINUS         &kp UNDER          &kp GRAVE             &kp TILDE              &trans
                                      &trans     &trans      &trans           &trans     &trans            &trans
            >;
        };

        util_layer{ 
            bindings = <
&trans  &trans        &trans        &trans         &trans         &trans         &trans      &trans             &trans        &trans        &trans  &trans
&trans  &trans        &trans        &trans         &trans         &trans         &trans      &mac_lang          &mac_ss       &trans        &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &kp C_BRI_DEC  &kp C_BRI_INC  &bt_clear_2    &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &out OUT_TOG  &trans  &trans
                                    &trans         &trans         &trans         &trans     &trans             &trans
            >;
        };
    };
};

